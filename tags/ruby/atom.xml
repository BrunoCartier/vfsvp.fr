<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ruby | VF svp]]></title>
  <link href="http://vfsvp.fr/tags/ruby/atom.xml" rel="self"/>
  <link href="http://vfsvp.fr/"/>
  <updated>2013-10-28T22:58:52+01:00</updated>
  <id>http://vfsvp.fr/</id>
  <author>
    <name><![CDATA[Simon Courtois (simonc)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir pour les rubyists (partie 1)]]></title>
    <link href="http://vfsvp.fr/article/elixir-pour-les-rubyists-1"/>
    <updated>2013-10-27T18:30:00+01:00</updated>
    <id>http://vfsvp.fr/article/elixir-pour-les-rubyists-1</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.natescottwest.com/blog/2013/09/26/elixir-for-rubyists/">Elixir for Rubyists part 1 par Nate West</a></p>

<p>Elixir est mon nouveau langage préféré. Cet article est le premier d'une série
de longueur indéterminée sur Elixir. En tant que rubyist, la syntaxe d'Elixir va
vous sembler familière. Je vais donc vous montrer beaucoup de code pour
vous expliquer comment il marche. Elixir est fonctionnel et amusant
(FUNctional).</p>

<p>Elixir est un langage fonctionnel qui tourne sur la VM Erlang mais ressemble
beaucoup à Ruby.</p>

<pre><code class="elixir">2 + 2
# =&gt; 4

IO.puts "Hello!"
# =&gt; Hello!
#    :ok

String.downcase("JE NE CRIE PAS")
# =&gt; "je ne crie pas"

defmodule Numbers do
  def add_to(num) do
    if is_number(num) do
      num + 2
    else
      raise(ArgumenError, message: "L'argument doit etre un nombre")
    end
  end
end

Numbers.add_to(4)
# =&gt; 6
Numbers.add_to("Nate")
# =&gt; ** (ArgumenError) L'argument doit etre un nombre
</code></pre>

<p>Elixir utilise la détection par motif (<em>pattern matching</em>) pour effectuer des
comparaisons et assigner des valeurs aux variables.</p>

<pre><code class="elixir">a = 2
# =&gt; 2

2 = a
# =&gt; 2

{ success, string } = { :ok, "Hey Joe, tu sais quoi ?" }
# =&gt; {:ok, "Hey Joe, tu sais quoi ?"}
success
# =&gt; :ok
string
# =&gt; "Hey Joe, tu sais quoi ?"
</code></pre>

<p>Elixir est fonctionnel, les variables sont donc immuables. Cependant,
contrairement à Erlang, ces dernières ne sont pas limitées à une seule
assignation. Si vous voulez détecter le motif de la valeur d'une variable, vous
devez utiliser un circonflexe <code>^</code>. Sans le circonflexe vous pouvez assigner une
nouvelle valeur à la variable.</p>

<pre><code class="elixir">a = 2
# =&gt; 2
^a = 3
# =&gt; ** (MatchError) aucune correspondance avec : 3
#    :erl_eval.expr/3
a = 3
# =&gt; 3
</code></pre>

<p>Comme tout langage fonctionnel, Elixir traite les fonctions comme des citoyens
de premier ordre. Vous pouvez assigner une fonction à une variable pour une
évaluation différée. Notez l'interpolation de chaîne dans l'exemple suivant,
une autre ressemblance à Ruby.</p>

<pre><code class="elixir">greeter = fn (name) -&gt; IO.puts "Hello #{name}" end
# =&gt; #Function&lt;6.80484245 in :erl_eval.expr/5&gt;
greeter.("Nate")
# =&gt; Hello Nate
#    :ok
</code></pre>

<p>Vous pouvez écrire des fonctions qui retournent des fonctions.</p>

<pre><code class="elixir">defmodule FunctionExamples do
  def build_greeter(kind) do
    case kind do
      :hello -&gt; fn (name) -&gt; "Coucou, #{name}!" end
      :goodbye -&gt; fn (name) -&gt; "A plus, #{name}!" end
      _ -&gt; fn (name) -&gt; "Je ne sais pas quoi te dire, #{name}." end
    end
  end
end

say_hello = FunctionExamples.build_greeter(:hello)
# =&gt; #Function&lt;0.63189797 in FunctionExamples.build_greeter/1&gt;
say_hello.("Nate")
# =&gt; Coucou, Nate!
#    :ok

wat = FunctionExamples.build_greeter(:something_else)
# =&gt; #Function&lt;2.63189797 in FunctionExamples.build_greeter/1&gt;
wat.("Nate")
# =&gt; "Je ne sais pas quoi te dire, Nate."
#    :ok
</code></pre>

<p>Comme dans d'autres langages fonctionnels, plutôt que de reposer sur des
boucles, Elixir utilise énormément la récursivité. Cela dit, le module <code>Enum</code>
fournit quelques fonctions bien connues des rubyists, comme <code>each</code> par exemple.</p>

<pre><code class="elixir">Enum.each(["Joe", "Matz", "Jose"], fn (name) -&gt; IO.puts(name) end)
# =&gt; Joe
# =&gt; Matz
# =&gt; Jose
# =&gt; :ok

defmodule RecursionExamples do
  def recurse([]) do
    :ok
  end
  def recurse([head|tail]) do
    IO.puts head
    recurse(tail)
  end
end

RecursionExamples.recurse(["Joe", "Matz", "Jose"])
# =&gt; Joe
# =&gt; Matz
# =&gt; Jose
# =&gt; :ok
</code></pre>

<p>C'est tout pour cette première partie. À bientôt pour la deuxième.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 façons de réduire la souffrance due aux tests fonctionnels avec Rails]]></title>
    <link href="http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails"/>
    <updated>2013-10-12T13:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://gaslight.co/blog/6-ways-to-remove-pain-from-feature-testing-in-ruby-on-rails">6 Ways to Remove Pain From Feature Testing in Ruby on Rails de Mitch Lloyd</a></p>

<p>L'écriture des tests fonctionnels a été une des parts les plus douloureuses de
mon travail avec Ruby on Rails. Mais aujourd'hui c'est quelque chose que
j'apprécie et voici pourquoi :</p>

<h2>1. Je n'utilise pas Cucumber</h2>

<p><strong>Attention:</strong> Le point de vue exprimé dans le paragraphe suivant ne reflète pas
forcement celui de l'équipe ou des partenaires de Gaslight Software, LLC.</p>

<p>Si vous avez installé Cucumber, supprimez-le. Les tests sont déjà assez
difficiles sans que l'on ait besoin de transformer le langage naturel en code
Ruby.</p>

<!-- more -->


<p>J'utilise :</p>

<ul>
<li>Rspec &ndash; DSL spécialisé dans les tests</li>
<li>FactoryGirl &ndash; Constructeur de modèles</li>
<li>Capybara &ndash; DOM Dominator</li>
<li>Database Cleaner - Nettoyeur de bases de données</li>
<li>Spring - Accélérateur de démarrage</li>
</ul>


<p>Et j'en suis très content. Écrivons une spec.</p>

<pre><code class="ruby">feature 'Navigating through workpapers' do
  let(:user) { create(:user) }
  let(:audit) { create(:audit, users: [user]) }

  scenario "User sees workpapers within an audit" do
    workpaper = create(:workpaper, audit: audit)

    visit '/'
    fill_in 'email', with: user.email
    fill_in 'password', with: 'password'
    click_on 'Log In'

    find('#audit-selector').select audit.name
    expect(page).to have_css?('.workpaper', text: workpaper.name)
  end
end
</code></pre>

<p>Tout cela est plutôt pas mal mais une <em>feature</em> un peu plus complexe deviendrait
vite illisible. La logique de connexion va immanquablement être dupliquée entre
plusieurs tests. Même cette <em>feature</em> n'est pas aussi lisible que je le
souhaiterais.</p>

<h2>2. Utilisez des <em>Page Objects</em></h2>

<p>Les sélecteurs Capybara ont une forte probabilité de casser au fur et à mesure
que le développement avance. Le responsable du contenu décide que le bouton du
formulaire de connexion va maintenant indiquer &ldquo;Connectez-vous à un monde où
tout est possible&rdquo;, vous devez maintenant corriger tous vos tests.</p>

<p>Les <em>page objects</em> sont des interfaces spécifiques à votre DOM. Lorsque le HTML
change, vous saurez exactement où corriger cela dans vos tests.</p>

<p>Voici un <em>page objet</em> &ldquo;page de connexion" :</p>

<pre><code class="ruby">class LoginPage
  include Capybara::DSL

  def visit_page
    visit '/'
    self
  end

  def login(user)
    fill_in 'email', with: user.email
    fill_in 'password', with: 'password'
    click_on 'Log In'
  end
end
</code></pre>

<p>Voici un autre <em>page object</em> &ldquo;index des documents" :</p>

<pre><code class="ruby">class WorkpaperIndexPage
  include Capybara::DSL

  def select_audit(audit)
    find('#audit-selector').select audit.name
  end

  def has_workpaper?(workpaper)
    has_css?('.workpaper', text: workpaper.name)
  end
end
</code></pre>

<p>Et voici maintenant un test utilisant ces <em>page objects</em> :</p>

<pre><code class="ruby">feature 'Navigating through workpapers' do
  let(:user) { create(:user) }
  let(:audit) { create(:audit, users: [user]) }
  let(:login_page) { LoginPage.new }
  let(:workpaper_page) { WorkpaperIndexPage.new }

  scenario "User sees workpapers within an audit" do
    workpaper = create(:workpaper, audit: audit)

    login_page.visit_page.login(user)
    workpaper_page.select(audit)
    expect(workpaper_page).to have_workpaper(workpaper)
  end
end
</code></pre>

<p>Considérons maintenant que quelqu'un modifie sans arrêt ce bouton de connexion.
Vous avez simplement à modifier <code>LoginPage</code> et utiliser un ID ou une entrée I18n
(ce qui aurait été une bonne idée dés le départ). Vous n'avez à vous inquiéter
d'aucun autre test, tout ce qui concerne cette page est contenu dans ce <em>page
object</em>.</p>

<p>Ces objets sont assez simples mais peuvent tout à fait grossir pour fournir des
fonctionnalités supplémentaires comme la vérification d'erreurs au fur et à
mesure que l'utilisateur au travers des pages (ou sections) du site. Le retour
sur investissement des <em>page objects</em> est si rapide que j'utilise toujours ce
type d'objet dans mes tests fonctionnels. De la même façon que je n'écris jamais
de SQL dans mes vues Rails, je n'accède pas au DOM depuis un test fonctionnel
sans <em>page object</em>.</p>

<h2>3. Créer des messages d'erreur utiles</h2>

<p>Un test fonctionnel qui échoue peut être difficile à diagnostiquer. Mettons que
vous utilisez un <em>page object</em> comme ceci :</p>

<pre><code class="ruby">expect(workpaper_page).to have_one_workpaper(workpaper)
</code></pre>

<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  expected #has_one_workpaper?(workpaper) to return true, got false
</code></pre>

<p>L'erreur est lisible mais il serait plus facile de savoir si elle est provoquée
par l'absence du document ou si la présence d'autres documents.</p>

<p>En général, je lève une exception lorsque j'appelle ce genre de prédicat sur
un <em>page object</em>.</p>

<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  PageExpectationNotMetError:
    expected one workpaper called "My Sweet Workpaper", but the following
    workpapers were on the page:
      * "Bogus Workpaper"
      * "My Sweet Workpaper"
</code></pre>

<p>J'utilise cette technique avec modération et je cherche toujours une approche
plus élégante. Cela me donne tout de même des messages d'erreur plus précis et
m'épargne quelques aller-retours avec le navigateur. Faites moi signe si vous
utilisez une autre technique de retour d'erreur dans vos tests.</p>

<h2>4. Embrassez les tests asynchrones</h2>

<p>Une grande part de la frustration relative aux tests automatisés dans un
navigateur est due aux assertions qui doivent attendre. Ajouter un <code>sleep</code> à vos
tests est passable si vous pensez que l'un de vos tests a un souci de timing
mais un <code>sleep</code> ne devrait jamais se trouver dans votre code de test final.</p>

<p>Les tests clignotants (ceux qui échouent de façon intermittente) tuent la
confiance que vous avez envers votre suite de tests. Ils devraient être corrigés
ou supprimés.</p>

<p>En général, je conseille surtout de bien apprendre l'API de Capybara. Voici
quelques pointeurs :</p>

<ul>
<li><code>#all</code> n'attend pas, ce n'est dont probablement pas le <em>matcher</em> que vous
cherchez ;</li>
<li>La méthode <code>#has_css?</code> peut prendre un compteur en paramètre de façon à
indiquer combien d'éléments vous voulez attendre ;</li>
<li>Écrire un test comme <code>expect(page).to_not have_css('.post')</code> est, en général,
une mauvaise idée. Ce matcher attend l'apparition d'éléments <code>.post</code> pour
passer ce qui peut engendrer un certain ralentissement. Dans ce genre de cas,
il est préférable d'utiliser <code>expect(page).to have_no_css('.post')</code> qui
passera immédiatement si les éléments sont absents de la page ou attendra
leur disparition s'ils sont présents. Dans ce dernier cas, il vaut mieux
s'assurer de leur présence au préalable.</li>
</ul>


<p>Il peut arriver que vous souhaitiez attendre que quelque chose se produise en
dehors de Capybara. Pour cela, <a href="https://gist.github.com/mattwynne/1228927">ce helper</a>
<code>eventually</code> est très pratique :</p>

<p>Le code suivant attend que le document soit <em>awesome</em> et échoue si ce n'est pas le cas après deux secondes.</p>

<pre><code class="ruby">eventually { expect(workpaper).to be_awesome }
</code></pre>

<p>Quand pourriez-vous avoir besoin de ce type d'assertion en dehors de Capybara ?
Lisez la suite…</p>

<h2>5. Prenez la construction de données au sérieux</h2>

<p>Je me souviens avoir entendu un mantra pour les tests fonctionnels qui disait
&ldquo;Tout faire du point de vue de l'utilisateur&rdquo;. Ce conseil visait à l'origine à
décourager les testeurs de manipuler les données directement dans les tests
fonctionnels. Je peux vous assurer que c'était un mauvais conseil. Il est juste
impensable d'inscrire un utilisateur et de passer au travers de vingt autres
étapes simplement pour le faire cliquer sur un bouton.</p>

<p>J'utilise beaucoup FactoryGirl pour mettre en place mes données de test. Cela
signifie que j'ai des factories permettant de générer des objets complexes.
Voici, par exemple, comment faire un document avec un workflow ayant des étapes
assignées à certains utilisateurs appelés <code>preparers</code> et <code>reviewers</code>.</p>

<pre><code class="ruby">FactoryGirl.define do
  factory :workpaper do
    sequence(:name) {|n| "workpaper #{n}"}

    factory :assigned_workpaper do
      ignore do
        preparer { create(:user) }
        reviewer { create(:user) }
      end

      after(:create) do |workpaper, evaluator|
        create(:assigned_workflow, workpaper: workpaper, preparer: evaluator.preparer, reviewer: evaluator.reviewer)
      end
    end
  end

  factory :workflow do
    factory :assigned_workflow do
      ignore do
        preparer { create(:user) }
        reviewer false
      end

      after(:create) do |workflow, evaluator|
        create(:step, workflow: workflow, user: evaluator.preparer)

        if evaluator.reviewer
          create(:step, workflow: workflow, user: evaluator.reviewer)
        end
      end
    end
  end

  factory :step
end
</code></pre>

<p>Cela me permet de créer de façon déclarative des objets spécifiques à mes tests.</p>

<pre><code class="ruby">create(:assigned_workpaper, preparer: first_user, reviewer: second_user)
</code></pre>

<p>Je crée toujours des instances de mes modèles via FactoryGirl dans mes tests
fonctionnels. Je suis fan de FactoryGirl mais je pense qu'il est possible de
faire encore mieux en ce qui concerne la construction de données complexes comme
celles-ci. Quel que soit l'outil utilisé, la mise en place des données de test
doit toujours être lisible et facilement exploitable.</p>

<p>Il est non seulement acceptable de mettre en place des données avant de
commencer vos tests mais il est également acceptable de vérifier les effets de
bord qui ne sont pas nécessairement visibles par l'utilisateur. Dans le monde
des applications en client riche par exemple, voir quelque chose à l'écran ne
signifie pas forcement que tout a été sauvegardé en base de données.</p>

<p>Tout comme nous avons des helpers pour construire nos données, nous devrions
avoir des helpers pour les inspecter. Ce test va s'assurer que le <em>preparer</em>
d'un document a été sauvegardé en base de données :</p>

<pre><code class="ruby">eventually { preparer_for(workpaper).should be(preparer) }
</code></pre>

<h2>6. Créez moins de tests, affinez ceux existant</h2>

<p>Lorsque j'ai commencé à écrire des tests fonctionnels avec Rails, on m'a donné
le conseil suivant &ldquo;chaque test doit contenir une action et une assertion&rdquo;. J'ai
donc travaillé comme ceci :</p>

<ul>
<li>Écrire un scénario cucumber pour une fonctionnalité</li>
<li>Faire fonctionner le code</li>
<li>Écrire un scénario cucumber pour un autre aspect de la fonctionnalité</li>
<li>Faire fonctionner le code</li>
</ul>


<p>C'est une bonne méthodologie pour les tests unitaires mais c'est une mauvaise
idée en ce qui concerne les tests fonctionnels.</p>

<p>Prenons le test suivant :</p>

<pre><code class="ruby">scenario "assigning a reviewer to a workpaper" do
  user_visits_workpaper(user, workpaper)
  ui.begin_assigning_reviewer
  ui.assign_work_to(reviewer)
  eventually { expect(reviewer_for workpaper).to eq(other_tester) }
end
</code></pre>

<p>Lorsque l'on appelle <code>ui.begin_assigning_reviewer</code> une boite de dialogue
s'ouvre pour permettre à l'utilisateur de choisir qui qui sera le <code>reviewer</code>.
Cette fonctionnalité marche. Très bien.</p>

<p>Je veux maintenant m'assurer que le seuls les utilisateurs ayant le droit de
faire des relectures soient listés. Plutôt que de créer un nouveau test, je vais
affiner celui que je viens d'écrire :</p>

<pre><code class="ruby">scenario "assigning a reviewer to a workpaper" do
  user_visits_workpaper(user, workpaper)
  ui.begin_assigning_reviewer
  expect(ui).to have_excluded_user(non_reviewer)
  ui.assign_work_to(reviewer)
  eventually { expect(reviewer_for workpaper).to eq(other_tester) }
end
</code></pre>

<p>Je n'utiliserais bien sûr pas cette technique pour les tests unitaires mais elle
est efficace pour les tests fonctionnels dont le but est de guider votre
progression et détecter les régressions.</p>

<h2>Mais qui teste vos tests ?</h2>

<p>Lorsque vos tests commencent à contenir beaucoup de logique, quelqu'un va finir
par vous dire &ldquo;Mais qui teste vos tests ?&rdquo; pour vous signifier que vos tests
sont trop compliqués, trop complexes. Votre code de production teste vos tests.
Ce n'est pas pour autant une excuse pour écrire de mauvais tests ou des tests
illisibles.</p>

<p>Les outils et techniques cités ci-dessus vont changer au fur et à mesure que le
temps passe mais j'ai augmenté ma sensibilité aux mauvais tests fonctionnels
pour toujours. Refactorez de façon agressive, concevez intelligemment et aimez
vos tests fonctionnels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les méthodes pack et unpack en Ruby]]></title>
    <link href="http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby"/>
    <updated>2013-10-07T10:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html">Ruby Pack Unpack de Neeraj Singh sur le blog de BigBinary</a></p>

<p>Le langage C permet aux développeurs d'accéder directement à la mémoire où sont
stockées les variables. Ruby ne le permet pas. Il est cependant des cas dans
lesquels on peut avoir besoin d'accéder aux bits et octets contenus dans cette
mémoire tout en travaillant avec Ruby. Ce dernier fournit deux méthods <code>pack</code> et
<code>unpack</code> pour cela.</p>

<p>Voici un exemple :</p>

<pre><code class="ruby">'A'.unpack('b*')
#=&gt; ["10000010"]
</code></pre>

<!-- more -->


<p>Dans le cas ci-dessus, <code>'A'</code> est une chaîne de caractères stockée et, grâce à
<code>unpack</code> je tente d'en lire la valeur binaire. La table ASCII indique que la
valeur de <code>'A'</code> est 65 et la représentation binaire de 65 est <code>10000010</code>.</p>

<p>Un autre exemple :</p>

<pre><code class="ruby">'A'.unpack('B*')
#=&gt; ["01000001"]
</code></pre>

<p>Notez bien le changement de résultat entre les deux exemples. Quelle est la
différence entre <code>b*</code> et <code>B*</code> ? Pour le comprendre nous devons d'abord parler
de <em>MSB</em> et <em>LSB</em>.</p>

<h2>Bit de poids fort et bit de poids faible</h2>

<p>Tous les bits ne sont pas créés égaux. <code>'C'</code> a la valeur ASCII 67. La
représentation binaire de 67 est <code>1000011</code>.</p>

<p>Parlons d'abord du style <em>MSB</em> (most significant bit, bit de poids fort). Si
vous utilisez le style <em>MSB</em>, et lisez donc de gauche à droite (en lisant tout
le temps de gauche à droite), le bit de poids le plus fort est donc le premier.
Puisque le bit de poids le plus fort vient en premier, nous pouvons ajouter un
<code>0</code> devant pour obtenir huit bits. Après avoir ajouté un <code>0</code> la représentation
binaire est donc <code>01000011</code>.</p>

<p>Pour convertir cette valeur en <em>LSB</em> (least significant bit, bit de poids
faible), nous devons stocker le bit de poids faible en premier (à gauche). Nous
pouvons voir ci-dessous comment les bits vont être déplacés lors de la
convertion de <em>MSB</em> vers <em>LSB</em>. Notez qu'ici la position 1 indique le bit le
plus à gauche.</p>

<ul>
<li>déplacer la valeur 1 de la position <em>MSB</em> 8 à la position <em>LSB</em> 1</li>
<li>déplacer la valeur 1 de la position <em>MSB</em> 7 à la position <em>LSB</em> 2</li>
<li>déplacer la valeur 0 de la position <em>MSB</em> 6 à la position <em>LSB</em> 3</li>
<li>et ainsi de suite</li>
</ul>


<p>Une fois l'exercice terminé, la valeur sera <code>11000010</code>.</p>

<p>Nous avons effectué cette transformation à la main pour bien comprendre la
différence entre bit de poids fort et bit de poids faible. La méthode <code>unpack</code>
est cependant capable de donner les deux représentations. Cette méthode peut
prendre <code>b*</code> ou <code>B*</code> en entrée, voici leur différence selon la documentation de
Ruby :</p>

<pre><code>B | bit string (MSB first) | représentation binaire (bit de poids fort en premier)
b | bit string (LSB first) | représentation binaire (bit de poids faible en
</code></pre>

<p>Voyons maintenant deux exemples.</p>

<pre><code class="ruby">'C'.unpack('b*')
#=&gt; ["11000010"]

'C'.unpack('B*')
#=&gt; ["01000011"]
</code></pre>

<p><code>b*</code> et <code>B*</code> voient tous les deux là même donnée. Ils représentent simplement
cette donnée différemment.</p>

<h2>Différentes façons de représenter une même donnée</h2>

<p>Disons que je souhaite la représentation binaire de la chaîne <code>hello</code>. D'après
ce que nous avons vu précédemment cela devrait être assez facile :</p>

<pre><code class="ruby">"hello".unpack('B*')
#=&gt; ["0110100001100101011011000110110001101111"]
</code></pre>

<p>Nous pouvons également obtenir le résultat suivant</p>

<pre><code class="ruby">"hello".unpack('C*').map {|e| e.to_s 2}
#=&gt; ["1101000", "1100101", "1101100", "1101100", "1101111"]
</code></pre>

<p>Voyons un exemple similaire mais en découpant les étapes cette fois.</p>

<pre><code class="ruby">"hello".unpack('C*')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>La directive <code>C*</code> retourne les caractères sous la forme d'un entier non signé
tenant sur 8 bits. On peut voir que la valeur ASCII de <code>h</code> est 104 et celle de
<code>e</code> est 101, etc.</p>

<p>En utilisant la technique vu précédemment, nous pouvons obtenir une
représentation hexadécimale de notre chaîne :</p>

<pre><code class="ruby">"hello".unpack('C*').map {|e| e.to_s 16}
#=&gt; ["68", "65", "6c", "6c", "6f"]
</code></pre>

<p>Il est toutefois possible d'obtenir directement cette valeur hexadécimale :</p>

<pre><code class="ruby">"hello".unpack('H*')
#=&gt; ["68656c6c6f"]
</code></pre>

<h2>High nibble first vs Low nibble first</h2>

<p>Observez la différence entre les deux cas suivants :</p>

<pre><code class="ruby">"hello".unpack('H*')
#=&gt; ["68656c6c6f"]

"hello".unpack('h*')
#=&gt; ["8656c6c6f6"]
</code></pre>

<p>La documentation Ruby indique</p>

<pre><code>H | hex string (high nibble first) | représentation hexadécimale (moitié haute en premier)
h | hex string (low nibble first)  | représentation hexadécimale (moitié basse en premier)
</code></pre>

<p>Un octet est composé de 8 bits. Une moitié contient donc 4 bits. Un octet
donc deux moitiés. La valeur ASCII de <code>h</code> est 104. 104 en hexadécimale s'écrit
68. Ce nombre 68 est stocké en deux moitiés. La première contient la valeur 6
sur 4 bits et la seconde contient la valeur 8. En général on utilise la notation
moitié haute puis moitié basse, de gauche à droite, la valeur 6 pour la
valeur 8.</p>

<p>Si cependant vous devez utiliser la notation moitié basse puis moitié haute, la
valeur 8 prendra la première place suivie de la valeur 6. La notation <em>moitié
basse en premier</em> donne donc 86.</p>

<p>Cette notation est utilisée pour chaque octet. Pour cette raison, la version
<em>moitié basse en premier</em> de <code>68 65 6c 6c 6f</code> est <code>86 56 c6 c6 f6</code>.</p>

<h2>Mélanger les directives</h2>

<p>Dans les exemples précédents, nous avons utilisé le caractère <code>*</code>. Cela indique
de traiter autant de caractères que possible. Par exemple :</p>

<p>A single C will get a single byte.</p>

<pre><code class="ruby">"hello".unpack('C')
#=&gt; [104]
</code></pre>

<p>Vous pouvez ajouter plus de <code>C</code> si vous le souhaitez.</p>

<pre><code class="ruby">"hello".unpack('CC')
#=&gt; [104, 101]

"hello".unpack('CCC')
#=&gt; [104, 101, 108]

"hello".unpack('CCCCC')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Plutôt que de répéter ces directives, nous pouvons utiliser un nombre pour
indiquer combien de fois la directive doit être répétée.</p>

<pre><code class="ruby">"hello".unpack('C5')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Nous pouvons utiliser <code>*</code> pour capturer toutes les octets restants.</p>

<pre><code class="ruby">"hello".unpack('C*')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Voyons un exemple dans lequel nous mélangeons les notations <em>MSB</em> et <em>LSB</em> :</p>

<pre><code class="ruby">"aa".unpack('b8B8')
#=&gt; ["10000110", "01100001"]
</code></pre>

<h2>pack est l'inverse de unpack</h2>

<p>La méthode <code>pack</code> est utilisée pour lire les données stockées. Voyons quelques
exemples d'utilisation :</p>

<pre><code class="ruby">[1000001].pack('C')
#=&gt; "A"
</code></pre>

<p>Dans le code ci-dessus, le valeur binaire est interpretée comme un entier non
signé sur 8 bits et le résultat est <code>'A'</code>.</p>

<pre><code class="ruby">['A'].pack('H')
#=&gt; "\xA0"
</code></pre>

<p>Ici, l'entrée <code>'A'</code> n'est pas le <code>A</code> ASCII mais le <code>A</code> hexadécimale. C'est
la version hexadécimale à cause de la directive <code>H</code>. Cette dernière indique à
<code>pack</code> de traiter l'entrée comme une valeur hexadécimale. Comme <code>H</code> utilise la
notation <em>moitié haute en premier</em>, puisque l'entrée ne contient qu'une moitié,
cela signifie que la deuxième moitié, la moitié basse, a la valeur <code>0</code>. L'entrée
est donc vue comme <code>'A0'</code>.</p>

<p>Comme la valeur hexadécimale <code>A0</code> ne correspond à rien dans la table ASCII, le
résultat final est laissé tel quel et vaut donc <code>'\xA0'</code>. Le préfix <code>\x</code> indique
qu'il s'agit d'une valeur hexadécimale.</p>

<p>En hexadécimale, <code>a</code> a la même valeur que <code>A</code>. Nous pouvons donc remplacer <code>A</code>
par <code>a</code> dans notre exemple précédent et le résultat reste inchangé. Essayons
pour voir :</p>

<pre><code class="ruby">['a'].pack('H')
#=&gt; "\xA0"
</code></pre>

<p>Un autre exemple :</p>

<pre><code class="ruby">['a'].pack('h')
#=&gt; "\n"
</code></pre>

<p>Dans le code ci-dessus, il y a une différence notable dans le résultat. Nous
avons changé la directive de <code>H</code> à <code>h</code>. Comme <code>h</code> indique d'utiliser la notation
<em>moitié basse en premier</em> et que l'entrée ne contient qu'une moitié, la moitié
basse vaut <code>0</code> et l'entrée est donc <code>0a</code>. Le résultat est <code>\x0A</code> et si l'on
regarde dans la table ASCII, <code>0A</code> vaut 10 et le caractère correspondant est
<code>NL</code>, <em>new line</em> soit un saut de ligne. C'est pour cela que nous voyons
s'afficher <code>\n</code> qui représente un saut de ligne.</p>

<h2>Utilisation de unpack dans le code de Rails</h2>

<p>J'ai cherché un peu dans le code source de Rails et trouvé les utilisations
suivantes de la méthode <code>unpack</code> :</p>

<pre><code class="ruby">email_address_obfuscated.unpack('C*')
'mailto:'.unpack('C*')
email_address.unpack('C*')
char.unpack('H2')
column.class.string_to_binary(value).unpack("H*")
data.unpack("m")
s.unpack("U*")
</code></pre>

<p>Nous avons déjà vu les directives <code>C*</code> et <code>H</code>, les directives <code>m</code> et <code>U</code> sont
cependant nouvelles. La première sert à donner une représentation encodée en
base64 de la valeur, la seconde retourne le caractère UTF-8 correspondant. Voici
un exemple :</p>

<pre><code class="ruby">"Hello".unpack('U*')
#=&gt; [72, 101, 108, 108, 111]
</code></pre>

<h2>Versions de test</h2>

<p>Les exmples de code précédents ont été testés avec la version <em>1.9.2</em> de Ruby.</p>

<p>NDT: J'ai testé avec les versions 1.9.3 et 2.0.0, les exemples sont toujours
valides.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser les Expressions Régulières en Ruby (3/3)]]></title>
    <link href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3"/>
    <updated>2013-10-05T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.bluebox.net/about/blog/2013/03/using-regular-expressions-in-ruby-part-3-of-3/">Using Regular Expressions in Ruby de Nell Shamrell sur le blog de Blue Box</a></p>

<p>Voici la seconde partie dans une série sur les Expressions Régulières en Ruby.
Vous pouvez lire la
<a href="/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3">première partie ici</a> et la
<a href="/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3">deuxième partie ici</a>.</p>

<h2>Le comportement des Expressions Régulières</h2>

<p>Les expressions régulières sont puissantes. Comme un célèbre super-héros l'a dit
un jour &ldquo;with great power comes great responsibility&rdquo; (à grands pouvoirs,
grande responsabilité). Pour éviter qu'une expression régulière ne cause une
catastrophe, vous devez être capable d'en contrôler le comportement.</p>

<!-- more -->


<p>Les expressions régulières ont trois comportements distincts : greedy
(gourmande), lazy (fainéante) et possessive. Ces termes peuvent sembler
négatifs mais ne sont pas pour autant de mauvaises attitudes pour vos
expressions. Ce sont simplement des descriptions des différentes façon d'agir
que peuvent utiliser vos expressions et que vous pouvez contrôler. Je vais vous
expliquer comment.</p>

<p>Pour comprendre ces comportements, il nous faut d'abord comprendre les
quantificateurs. Ils permettent de dire au moteur d'expressions régulières
combien de fois un caractère ou un groupe de caractères doit apparaitre dans
notre chaîne.</p>

<p>Un des quantificateurs que j'utilise le plus souvent est le <code>+</code>. Lorsque je le
place derrière un caractère, j'indique que ce dernier doit apparaitre au moins
une fois. Il peut apparaitre autant de fois qu'il le souhaite mais doit être au
minimum présent une fois.</p>

<p>Prenons l'expression suivante :</p>

<pre><code class="ruby">/.+/
</code></pre>

<p>Celle-ci trouverait une correspondance pour tout caractère apparaissant au moins
une fois. Elle garantie donc la présence d'un caractère dans la chaîne.</p>

<p>Les quantificateurs sont à la base même du comportement de votre expression, à
savoir gourmande, fainéante ou possessive. Par défaut, elle est gourmande.</p>

<p>Un quantificateur gourmand tente de trouver la correspondance la plus longue
possible au sein de la chaîne. Il attrape autant de caractères que ses petites
mains gourmandes le lui permettent et tente de trouver une correspondance. Si
toute la chaîne ne correspond pas, il prend un caractère de moins et tente de
nouveau la recherche. Il recommence ce processus jusqu'à ce qu'il ne trouve
plus de caractères à tester.</p>

<p>Les quantificateurs gourmands fournissent un effort maximum pour un retour
maximum. Un quantificateur gourmand essaie autant de cas que possible pour
trouver une correspondance et retourne le maximum de caractères en faisant
partie.</p>

<p>Pour l'exemple suivant, je vais changer de science fiction et emprunter une
citation de <em>Star Trek: First Contact</em> :</p>

<pre><code class="ruby">string = "There's no time to talk about time we don't have the time"
/.+time/
</code></pre>

<p>Cette expression régulière capture tout caractère apparaissant au moins une
fois, le tout suivi du mot &ldquo;time&rdquo;. Si je fais appel à la méthode <code>match</code> sur
mon expression régulière en lui passant ma chaîne en paramètre :</p>

<pre><code class="ruby">/.+time/.match(string)
#=&gt; "There's no time to talk about time we don't have the time"
</code></pre>

<p>Toute la chaîne correspond.</p>

<p>Lorsque cette expression analyse la chaîne, elle tente d'abord de trouver la
première partie du modèle, <code>.+</code>. Cela correspond à toute la chaîne. Elle essaie
ensuite de trouver la deuxième partie, le mot <code>time</code>. Comme toute la chaîne a
été consommée, elle cherche &ldquo;time&rdquo; après la fin de cette dernière et ne trouve
rien. Elle recule donc d'un caractère (<em>backtrack</em>) et retente le test pour
trouver une correspondance. Une fois celle-ci trouvée, elle est retournée. Dans
notre cas, cela représente toute la chaîne.</p>

<p>Les quantificateurs gourmands tentent de faire correspondre toute la chaine puis
reculent progressivement. Ce recule progressif signifie que, si notre chaîne ne
correspond pas du tout au modèle, l'expression va tenter autant que possible de
trouver une correspondance. Elle doit garder en mémoire les possibilités déjà
tentées ce qui peut prendre beaucoup de ressources systèmes, en particulier
lorsque vous avez plusieurs tests effectués sur un texte long.</p>

<p>Oniguruma a certaines optimisations qui rendent le recule progressif plus
rapide. Patrick Shaughnessy a écrit un fantastique article sur son blog qui
détail comment Oniguruma gère le recul progressif. Malgré les optimisations, une
expression régulière gourmande consommera tout de même beaucoup de ressources.</p>

<p>Lorsque vous souhaitez une recherche plus réduite et qui consomme moins de
ressources, vous devez utiliser un quantificateurs fainéant. Également appelé
quantificateur réticent, celui-ci va commencer sa recherche au tout début
de la chaîne et tenter de faire correspondre le premier caractère. Si cela ne
suffit pas, il va consommer un caractère supplémentaire. En dernier ressort il
tentera de consommer toute la chaîne.</p>

<p>Un quantificateur fainéant fournit l'effort minimum pour un retour minimum. Il
retourne le moins de caractères possible pour une correspondance. S'il trouve ce
qu'il cherche avec le premier caractère de la chaîne, il va simplement retourner
celui-ci. Il est fainéant, il fait le minimum demandé et rien de plus.</p>

<p>Pour utiliser un quantificateur fainéant, il suffit de lui ajouter un point
d'interrogation.</p>

<pre><code class="ruby">/.+?time/
</code></pre>

<p>Si j'appelle la méthode <code>match</code> sur ma chaîne en utilisant un quantificateur
fainéant</p>

<pre><code class="ruby">/.+?time/.match(string)
#=&gt; "There's no time"
</code></pre>

<p>Je récupère seulement &ldquo;There&rsquo;s no time&rdquo;. La recherche a commencé au tout début
de la chaîne et retourne la correspondance minimum. Les expressions régulière
fainéantes utilisent beaucoup moins de recul progressif et, par conséquent,
moins de ressources que les expressions gourmandes.</p>

<p>Comment faire lorsque l'on souhaite récupérer un maximum de caractères tout en
limitant le recul progressif et la consommation de ressources ? Pour cela, il
existe un troisième quantificateur, le quantificateur possessif. Il fonctionne
sur le principe de tout ou rien, soit il trouve une correspondance au premier
essai soit il échoue. Comme le gourmand, il consomme le plus de caractères possibles (la chaîne entière) et tente la correspondance. Si cette tentative
échoue, il n'y aura ni recul ni nouvel essai.</p>

<p>Les quantificateurs possessifs utilisent un effort minimum pour un retour
maximum. Ils tentent de retournent autant de caractères que possible en en
faisant le moins possible (ils tentent une fois puis abandonnent).</p>

<p>Pour rendre un quantificateur possessif, il suffit de lui ajouter un plus <code>+</code> :</p>

<pre><code class="ruby">/.++time/
</code></pre>

<p>Lançons la méthode <code>match</code> sur notre chaîne en lui passant cette expression
possessive :</p>

<pre><code class="ruby">/.++time/.match(string)
#=&gt; nil
</code></pre>

<p>Cet appel retourne <code>nil</code> car le test a échoué. Pourquoi cet échec ? Il semble
pourtant que notre chaîne corresponde à l'expression. La raison est qu'aucun
recul progressif n'est effectué.</p>

<p>L'expression va d'abord tenter de trouver <code>.++</code> ce qui va consommer tout la
chaîne. Lorsqu'elle tente de trouver le mot <code>time</code>, il ne reste plus de
caractère à consommer. L'expression ne peut pas reculer à cause du
quantificateur possessif et va donc échouer.</p>

<p>Le principal avantage des quantificateurs possessifs est l'échec rapide.
L'absence de recul consomme très peu de ressources. Un quantificateur gourmand
va tenter tout ce qui est possible pour trouver une correspondance. En cas
d'échec, tout ce travail et toutes ces ressources n'auront servi à rien. Un
quantificateur possessif évite cela, si aucune correspondance n'existe l'échec
sera rapide.</p>

<p>En général, l'utilisation de quantificateurs possessifs se limite à des
expressions très courte, lorsque vous avez une petite sous-expression au sein
d'une expression plus large. Ils sont très utiles mais à utiliser avec
précaution.</p>

<h2>Conclusion</h2>

<p>Les expressions régulières peuvent sembler extrêmement complexes. Lorsque j'ai
appris à aller plus loin que les bases, au delà des petites astuces de
validation d'email par exemple, j'ai trouvé que cela m'aidait de les voir comme
un sous-programme dans un langage différent. En réalité c'est exactement ça.
Vous écrivez un programme, au sein d'un autre programme, au sein de Ruby
lui-même.</p>

<p>Comme tout langage de programmation, il est plus simple d'écrire vos expressions
par petites parties. Lorsque j'écris un <em>lookbehind</em>, j'écris d'abord le modèle
principal, m'assure qu'il fonctionne. J'écris ensuite le modèle du lookbehind,
séparément, et m'assure qu'il fonctionne également. Une fois cela fait, je
joins les deux modèles pour valider qu'ils fonctionnent ensemble.</p>

<p><a href="http://rubular.com/">Rubular</a> est un site fantastic pour écrire et tester vos
expressions régulières. Testez le, utilisez le, il m'a vraiment facilité la vie.</p>

<p>Comme tout programme informatique, les expressions régulières s'écrivent en
plusieurs fois. Lorsque vous concevez une expression, il est tout à fait normal
que celle-ci soit laide au début. Faites la fonctionner et après seulement
tentez de la rendre plus lisible. C'est le même processus rouge, vert,
réusinage (red, green, refector) qui est utilisé dans le développement dirigé
par les tests.</p>

<p>Les expressions régulières sont puissantes. Si puissantes qu'elles font peur à
beaucoup d'entre-nous. Cette peur peut être surpassée. Aussi obscures qu'elle
peuvent paraître, elles ont une structure logique et réfléchie. Utilisez-les,
lancez Rubular et essayez quelques <em>lookaheads</em> et <em>lookbehinds</em>. Tentez les
quantificateurs gourmands, fainéants et possessifs. Explorez la fantastique
intégration des expressions régulières dans Ruby, je pense que vous en serez
surpris ce que vous trouverez.</p>

<h2>L'auteur chez Blue Box</h2>

<p>Nell Shamrell travaille chez Blue Box en tant qu'Ingénieur Développement
Logiciel. Elle siège également au conseil de Certification de Programmation
Ruby de l'Université de Washington et est spécialisée en Ruby, Rails et
Développement Dirigé par les Tests (TDD). Avant le développement, Nell a étudié
et travaillé dans le domaine du théâtre, une excellente préparation à
l'environnement dynamique de la création d'applications logicielles. Dans ces
deux mondes, elle s'efforce de créer une expérience unique. Sur son temps
libre, elle pratique l'art martial appelé Naginata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser les Expressions Régulières en Ruby (2/3)]]></title>
    <link href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3"/>
    <updated>2013-10-05T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.bluebox.net/about/blog/2013/03/using-regular-expressions-in-ruby-part-2-of-3/">Using Regular Expressions in Ruby de Nell Shamrell sur le blog de Blue Box</a></p>

<p>Voici la seconde partie dans une série sur les Expressions Régulières en Ruby.
Vous pouvez lire la
<a href="/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3">première partie ici</a> et la
<a href="/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3">troisième partie ici</a>.</p>

<h2>Les LookArounds</h2>

<p>Les lookarounds me permettent d'aller plus loin que la simple comparaison avec
un modèle. En effet, ils offrent la possibilité de donner un contexte à cette
comparaison. Une expression contenant un lookaround ne retourne un résultat que
lorsqu'elle est effectuée dans ce contexte.</p>

<!-- more -->


<p>Soit une nouvelle chaîne de caractère, une autre citation d'Obiwan Kenobi dans
Star Wars.</p>

<pre><code class="ruby">string = "Who's the more foolish?  The fool or the fool who follows him?"
</code></pre>

<p>Je veux connaître tous les emplacements du mot &ldquo;fool&rdquo; dans cette chaîne. Je vais
donc utiliser l'expression régulière <code>/fool/</code>. Dans ce cas précis, je vais
utiliser la méthode <code>scan</code> sur ma chaîne. Cette méthode retourne toutes les
occurrences de mon expression dans la chaîne :</p>

<pre><code class="ruby">string.scan(/fool/)
#=&gt; ["fool", "fool", "fool"]
</code></pre>

<p>Comme on peut le voir, scan retourne une partie du mot &ldquo;foolish&rdquo; et les deux
occurrences du mot &ldquo;fool&rdquo;.</p>

<p>Comment fait-on si l'on souhaite que notre modèle <code>/fool/</code> retourne un résultat
seulement s'il fait partie du mot &ldquo;foolish&rdquo; ? Pour ce cas j'utiliserais un
<em>lookahead positif</em> (recherche vers l'avant). Cela indique à mon expression
régulière de trouver toutes les correspondances à mon modèle directement suivies
d'une correspondance à un autre modèle. En Ruby, un lookahead positif est
exprimé grâce à l'opérateur <code>?=</code> :</p>

<pre><code class="ruby">/fool(?=ish)/
</code></pre>

<p>Voici mon expression modifiée. Comme vous pouvez le voir, j'ai mon modèle
contenant le mot &ldquo;fool&rdquo; directement suivi du modèle lookahead &ldquo;ish&rdquo;.</p>

<pre><code class="ruby">string.scan(/fool(?=ish)/)
&gt;=&gt; ["fool"]
</code></pre>

<p>Cette fois-ci, la méthode <code>scan</code> retourne un seul résultat, la seule occurrence
de &ldquo;fool&rdquo; suivie de &ldquo;ish&rdquo;.</p>

<p>De nouveau, utilisons la méthode <code>gsub</code> pour modifier notre chaîne. Remplaçons
chaque occurrence de &ldquo;fool&rdquo; (suivie de &ldquo;ish&rdquo;) par le mot &ldquo;self" :</p>

<pre><code class="ruby">string.gsub(/fool(?=ish)/, "self")
#=&gt; "Who's the more selfish?  The fool or the fool who follows him?"
</code></pre>

<p>Nos excuses à Obiwan Kenobi, nous avons changé la ligne pour <em>&ldquo;Who&rsquo;s the more
selfish?  The fool or the fool who follows him?&rdquo;</em>.</p>

<p>Techniquement, c'est ce que l'on appelle une <em>zero-width, positive lookahead
assertion</em> (recherche positive vers l'avant de taille zéro). Facile à prononcer
n'est-ce pas ? Dans le livre <em>The Well Grounded Rubyist</em>, David Black
l'explique comme ceci :</p>

<dl>
<dt>Zero-width</dt>
<dd>   (taille zéro) signifie que le modèle lookahead (&ldquo;ish&rdquo; dans notre cas) ne
   consomme pas de caractères. Cela veut dire que la correspondance est
   cherchée mais n'est pas retournée. Seule la présence d'une correspondance
   est retournée, vrai ou faux.</dd>
<dt>Positive</dt>
<dd>   signifie que le modèle doit être présent, obligatoirement.</dd>
<dt>Lookahead</dt>
<dd>   veut dire que cette expression est recherchée après le modèle principal.</dd>
<dt>Assertion</dt>
<dd>   indique que seule la présence d'une correspondance est retournée sous la
   forme true/false (vrai/faux).</dd>
</dl>

<p>Quelles sont mes autres possibilité ? Si par exemple je souhaite trouver toutes
les occurrences du mot &ldquo;fool&rdquo; qui ne sont <strong>pas</strong> suivies des lettres &ldquo;ish&rdquo; ?
Dans ce cas, je dois utiliser un lookahead négatif. Techniquement, c'est ce que
l'on appelle une <em>zero-width, negative lookahead assertion</em> (recherche négative
vers l'avant de taille zéro). Négative signifie qu'aucune correspondance à ce
modèle ne doit être trouvée. Pour effectuer un lookahead négatif, uilisez
l'opérateur <code>?!</code>.</p>

<p>Je vais de nouveau appeler <code>scan</code> sur ma chaîne en utilisant cette fois un
lookahead négatif dans mon expression régulière. Je veux trouver toutes les
occurrences de &ldquo;fool&rdquo; qui ne font pas partie du mot &ldquo;foolish" :</p>

<pre><code class="ruby">string.scan(/fool(?!ish)/)
#=&gt; ["fool", "fool"]
</code></pre>

<p>Deux correspondances sont retournées, les deux fois où le mot &ldquo;fool&rdquo; apparait
sans faire partie de &ldquo;foolish&rdquo;.</p>

<p>Utilisons maintenant la méthode <code>gsub</code>. À chaque fois que nous
trouvons le mot &ldquo;fool&rdquo; (non suivi des lettres &ldquo;ish&rdquo;), nous allons le remplacer
pas le mot &ldquo;self" :</p>

<pre><code class="ruby">string.gsub(/fool(?!ish)/, "self")
#=&gt; "Who's the more foolish?  The self or the self who follows him?"
</code></pre>

<p>Encore une fois j'ai changé une réplique classique. On peut maintenant lire
&ldquo;Who&rsquo;s the more foolish?  The self or the self who follows him?&rdquo;</p>

<p>Les lookaheads sont très pratiques lorsque l'on souhaite trouver une
correspondance en prenant en compte ce qui la suit. Allons de nouveau un peu
plus loin. Comment dois-je m'y prendre si je souhaite trouver une correspondance
à partir de ce qui la précède ? Pour faire cela, je dois utiliser une <em>positive
lookbehind assertion</em> (recherche positive vers l'arrière). Cela signifie que je
veux trouver toutes les correspondances à mon modèle précédées d'un autre
modèle.</p>

<p>Utilisons une autre citation de Star Wars, une de Yoda cette fois-ci :</p>

<pre><code class="ruby">string = "For my ally is the force, and a powerful ally it is."
</code></pre>

<p>The modèle principal que je souhaite chercher est le mot &ldquo;ally&rdquo;, je vais donc
utiliser l'expression régulière <code>/ally/</code>. J'aimerais cependant trouver le mot
&ldquo;ally&rdquo; uniquement s'il est directement précédé du mot &ldquo;powerful&rdquo;. C'est le cas
parfait pour un <em>positive lookbehind</em> (recherche positive vers l'arrière). Les
lookbehinds positifs utilisent l'opérateur <code>?&lt;=</code>. Utilisons le dans notre
expression régulière :</p>

<pre><code class="ruby">/(?&lt;=powerful )ally/
</code></pre>

<p>Cette expression régulière relève le mot &ldquo;ally&rdquo; chaque fois qu'il est
directement précédé du mot &ldquo;powerful&rdquo;. Comme vous pouvez le remarquer, le
lookbehind est positionné avant le modèle principal. Cela montre bien que le mot
&ldquo;powerful&rdquo; doit est devant le mot &ldquo;ally&rdquo;.</p>

<p>Je vais maintenant utiliser la méthode <code>gsub</code> sur ma chaîne. Chaque fois que le
mot &ldquo;ally&rdquo; est précédé par le mot &ldquo;powerful&rdquo;, je veux le remplacer par le mot
&ldquo;friend" :</p>

<pre><code class="ruby">string.gsub(/(?&lt;=powerful )ally/, "friend")
#=&gt; For my ally is the force, and a powerful friend it is.
</code></pre>

<p>Cela change quelque peu les mots de Yoda : &ldquo;For my ally is the force, and a
powerful friend it is.&rdquo;</p>

<p>Comment dois-je m'y prendre si je souhaite faire le contraire ? Si par exemple
je veux toutes les occurrences du mot &ldquo;ally&rdquo; qui ne sont <strong>pas</strong> précédées du
mot &ldquo;powerful&rdquo;. Dans ce cas, je dois utiliser un <em>negative lookbehind</em>
(recherche négative vers l'arrière). Pour cela on trouve l'opérateur <code>?&lt;!</code>.
Utilisons-le dans notre expression régulière :</p>

<pre><code class="ruby">/(?&lt;!powerful )ally/
</code></pre>

<p>Utilisons maintenant <code>gsub</code> sur notre chaîne pour remplacer chaque occurence du
mot &ldquo;ally&rdquo;, non précédée du mot &ldquo;powerful&rdquo;, par le mot &ldquo;friend" :</p>

<pre><code class="ruby">string.gsub(/(?&lt;!powerful )ally/, "friend")
#=&gt; "For my friend is the force, and a powerful ally it is."
</code></pre>

<p>J'ai de nouveau changé les paroles de Yoda : &ldquo;For my ally is the force, and a
powerful friend it is.&rdquo;.</p>

<p>Les lookarounds donnent une puissance incroyable à vos expressions régulières en
leur apportant un contexte. Plutôt que d'utiliser un modèle strict qui
correspond ou non, vos expressions régulières deviennent puissantes, flexibles
et capables de trouver bien plus de choses.</p>

<p><a href="/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3">Lire le troisième article de cette série</a></p>

<h2>L'auteur chez Blue Box</h2>

<p>Nell Shamrell travaille chez Blue Box en tant qu'Ingénieur Développement
Logiciel. Elle siège également au conseil de Certification de Programmation
Ruby de l'Université de Washington et est spécialisée en Ruby, Rails et
Développement Dirigé par les Tests (TDD). Avant le développement, Nell a étudié
et travaillé dans le domaine du théâtre, une excellente préparation à
l'environnement dynamique de la création d'applications logicielles. Dans ces
deux mondes, elle s'efforce de créer une expérience unique. Sur son temps
libre, elle pratique l'art martial appelé Naginata.</p>
]]></content>
  </entry>
  
</feed>
